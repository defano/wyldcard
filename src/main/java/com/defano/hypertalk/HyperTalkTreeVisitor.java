package com.defano.hypertalk;

import com.defano.hypertalk.ast.expression.*;
import com.defano.hypertalk.ast.expression.container.*;
import com.defano.hypertalk.ast.expression.function.NumberFunc;
import com.defano.hypertalk.ast.expression.function.SelectedButtonFunc;
import com.defano.hypertalk.ast.expression.operator.BinaryOperator;
import com.defano.hypertalk.ast.expression.operator.BinaryOperatorExp;
import com.defano.hypertalk.ast.expression.operator.UnaryOperator;
import com.defano.hypertalk.ast.expression.operator.UnaryOperatorExp;
import com.defano.hypertalk.ast.expression.part.*;
import com.defano.hypertalk.ast.model.*;
import com.defano.hypertalk.ast.model.chunk.Chunk;
import com.defano.hypertalk.ast.model.chunk.ChunkType;
import com.defano.hypertalk.ast.model.chunk.CompositeChunk;
import com.defano.hypertalk.ast.model.enums.*;
import com.defano.hypertalk.ast.model.specifier.ButtonFamilySpecifier;
import com.defano.hypertalk.ast.model.specifier.MenuItemSpecifier;
import com.defano.hypertalk.ast.model.specifier.MenuSpecifier;
import com.defano.hypertalk.ast.model.specifier.PropertySpecifier;
import com.defano.hypertalk.ast.statement.*;
import com.defano.hypertalk.ast.statement.command.*;
import com.defano.hypertalk.ast.statement.conditional.IfStatement;
import com.defano.hypertalk.ast.statement.conditional.ThenElseBlock;
import com.defano.hypertalk.ast.statement.repeat.*;
import com.defano.hypertalk.parser.HyperTalkBaseVisitor;
import com.defano.hypertalk.parser.HyperTalkParser;
import com.defano.wyldcard.part.model.PartModel;
import com.defano.wyldcard.part.wyldcard.WyldCardProperties;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.TerminalNode;

/**
 * Converts an Antlr parse tree into a HyperTalk abstract syntax tree using Antlr's visitor pattern. The HyperTalk
 * grammar is defined in HyperTalk.g4.
 * <p>
 * In Antlr4, parse trees generated by the parser are effectively immutable. This class walks that immutable parse tree
 * ("visits" each node in it) and generates an alternate representation of the language consisting of {@link Expression}
 * and {@link Statement} nodes that bind some behavior or action to each node in the syntax tree.
 * <p>
 * There is approximately (but not exactly) a one-to-one relationship between nodes in the parse tree and in the AST.
 * In some cases, it was more effective to introduce grammar constructs useful for parsing, but which do not represent
 * either a valid expression or statement (like date/time conversion formats); these represent nodes in the parse tree
 * which are "gobbled up" by this visitor and do not yield a corresponding node in the AST.
 * <p>
 * Each method in this class corresponds to a "label" in the grammar (i.e., the symbol to the right of the '#'). As you
 * add production rules to the grammar you must implement the corresponding visitor method to produce an AST node.
 */
public class HyperTalkTreeVisitor extends HyperTalkBaseVisitor<Object> {

    @Override
    public Object visitHandlerScript(HyperTalkParser.HandlerScriptContext ctx) {
        Script script = (Script) visit(ctx.script());
        script.defineHandler((NamedBlock) visit(ctx.handler()), ctx.handler().getStart().getLine(), ctx.handler().getStop().getLine());
        return script;
    }

    @Override
    public Object visitFunctionScript(HyperTalkParser.FunctionScriptContext ctx) {
        Script script = (Script) visit(ctx.script());
        script.defineUserFunction((UserFunction) visit(ctx.function()), ctx.function().getStart().getLine(), ctx.function().getStop().getLine());
        return script;
    }

    @Override
    public Object visitNewlineScript(HyperTalkParser.NewlineScriptContext ctx) {
        return visit(ctx.script());
    }

    @Override
    public Object visitHideCmd(HyperTalkParser.HideCmdContext ctx) {
        return new SetPropertyCmd(ctx, (Expression) visit(ctx.expression()), PartModel.PROP_VISIBLE, new Value(false));
    }

    @Override
    public Object visitHideThisCardPictCmd(HyperTalkParser.HideThisCardPictCmdContext ctx) {
        return new PictureVisibleCmd(ctx, Owner.CARD, false);
    }

    @Override
    public Object visitHideThisBkgndPictCmd(HyperTalkParser.HideThisBkgndPictCmdContext ctx) {
        return new PictureVisibleCmd(ctx, Owner.BACKGROUND, false);
    }

    @Override
    public Object visitHidePictCmd(HyperTalkParser.HidePictCmdContext ctx) {
        return new PictureVisibleCmd(ctx, null, (Expression) visit(ctx.expression()), false);
    }

    @Override
    public Object visitHideTitleBarCmd(HyperTalkParser.HideTitleBarCmdContext ctx) {
        return new TitleBarVisibleCmd(ctx, false);
    }

    @Override
    public Object visitHideMenubarCmd(HyperTalkParser.HideMenubarCmdContext ctx) {
        return new MenuBarVisibleCmd(ctx, false);
    }

    @Override
    public Object visitImportPaintCmd(HyperTalkParser.ImportPaintCmdContext ctx) {
        return new ImportPaintCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitKeydownCmd(HyperTalkParser.KeydownCmdContext ctx) {
        return new KeyDownCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitShowCmd(HyperTalkParser.ShowCmdContext ctx) {
        return new SetPropertyCmd(ctx, (Expression) visit(ctx.expression()), PartModel.PROP_VISIBLE, new Value(true));
    }

    @Override
    public Object visitShowAtCmd(HyperTalkParser.ShowAtCmdContext ctx) {
        return new ShowAtCmd(ctx, (Expression) visit(ctx.expression()), (Expression) visit(ctx.listExpression()));
    }

    @Override
    public Object visitShowThisCardPictCmd(HyperTalkParser.ShowThisCardPictCmdContext ctx) {
        return new PictureVisibleCmd(ctx, Owner.CARD, true);
    }

    @Override
    public Object visitShowThisBkgndPictCmd(HyperTalkParser.ShowThisBkgndPictCmdContext ctx) {
        return new PictureVisibleCmd(ctx, Owner.BACKGROUND, true);
    }

    @Override
    public Object visitShowPictCmd(HyperTalkParser.ShowPictCmdContext ctx) {
        return new PictureVisibleCmd(ctx, null, (Expression) visit(ctx.expression()), true);
    }

    @Override
    public Object visitShowTitleBarCmd(HyperTalkParser.ShowTitleBarCmdContext ctx) {
        return new TitleBarVisibleCmd(ctx, true);
    }

    @Override
    public Object visitShowMenubarCmd(HyperTalkParser.ShowMenubarCmdContext ctx) {
        return new MenuBarVisibleCmd(ctx, true);
    }

    @Override
    public Object visitShowAllCardsCmd(HyperTalkParser.ShowAllCardsCmdContext ctx) {
        return new ShowCardsCmd(ctx, true, false, null);
    }

    @Override
    public Object visitShowMarkedCardsCmd(HyperTalkParser.ShowMarkedCardsCmdContext ctx) {
        return new ShowCardsCmd(ctx, false, true, null);
    }

    @Override
    public Object visitShowCardsCmd(HyperTalkParser.ShowCardsCmdContext ctx) {
        return new ShowCardsCmd(ctx, false, false, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitWaitCountCmd(HyperTalkParser.WaitCountCmdContext ctx) {
        return new WaitCmd(ctx, (Expression) visit(ctx.expression()), (TimeUnit) visit(ctx.timeUnit()));
    }

    @Override
    public Object visitWaitUntilCmd(HyperTalkParser.WaitUntilCmdContext ctx) {
        return new WaitCmd(ctx, (Expression) visit(ctx.expression()), true);
    }

    @Override
    public Object visitWaitWhileCmd(HyperTalkParser.WaitWhileCmdContext ctx) {
        return new WaitCmd(ctx, (Expression) visit(ctx.expression()), false);
    }

    @Override
    public Object visitSortDirectionCmd(HyperTalkParser.SortDirectionCmdContext ctx) {
        return new SortCmd(ctx, (Expression) visit(ctx.expression()), (ChunkType) visit(ctx.sortChunkType()), (SortDirection) visit(ctx.sortDirection()), (SortStyle) visit(ctx.sortStyle()));
    }

    @Override
    public Object visitSortExpressionCmd(HyperTalkParser.SortExpressionCmdContext ctx) {
        return new SortCmd(ctx, (Expression) visit(ctx.expression(0)), (ChunkType) visit(ctx.sortChunkType()), (Expression) visit(ctx.expression(1)), (SortDirection) visit(ctx.sortDirection()), (SortStyle) visit(ctx.sortStyle()));
    }

    @Override
    public Object visitSortMarkedCardsCmd(HyperTalkParser.SortMarkedCardsCmdContext ctx) {
        return new SortCardsCmd(ctx, true, (SortDirection) visit(ctx.sortDirection()), (SortStyle) visit(ctx.sortStyle()), (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSortStackCmd(HyperTalkParser.SortStackCmdContext ctx) {
        return new SortCardsCmd(ctx, false, (SortDirection) visit(ctx.sortDirection()), (SortStyle) visit(ctx.sortStyle()), (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSortBkgndCardsCmd(HyperTalkParser.SortBkgndCardsCmdContext ctx) {
        return new SortCardsCmd(ctx, false, (Expression) visit(ctx.expression(0)), (SortDirection) visit(ctx.sortDirection()), (SortStyle) visit(ctx.sortStyle()), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitSortMarkedBkgndCardsCmd(HyperTalkParser.SortMarkedBkgndCardsCmdContext ctx) {
        return new SortCardsCmd(ctx, true, (Expression) visit(ctx.expression(0)), (SortDirection) visit(ctx.sortDirection()), (SortStyle) visit(ctx.sortStyle()), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitSpeakCmd(HyperTalkParser.SpeakCmdContext ctx) {
        return new SpeakCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSpeakGenderCmd(HyperTalkParser.SpeakGenderCmdContext ctx) {
        return new SpeakCmd(ctx, (Expression) visit(ctx.expression()), new LiteralExp(ctx, ctx.gender.getText()));
    }

    @Override
    public Object visitSpeakVoiceCmd(HyperTalkParser.SpeakVoiceCmdContext ctx) {
        return new SpeakCmd(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitKeywordToolExpr(HyperTalkParser.KeywordToolExprContext ctx) {
        return new LiteralExp(ctx, ctx.getText());
    }

    @Override
    public Object visitToolExpr(HyperTalkParser.ToolExprContext ctx) {
        return visit(ctx.expression());
    }

    @Override
    public Object visitArrowLiteralExpr(HyperTalkParser.ArrowLiteralExprContext ctx) {
        return new LiteralExp(ctx, ctx.getText());
    }

    @Override
    public Object visitArrowExpr(HyperTalkParser.ArrowExprContext ctx) {
        return visit(ctx.expression());
    }

    @Override
    public Object visitVisualEffectName(HyperTalkParser.VisualEffectNameContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectName()), (Expression) visit(ctx.effectDirection()), null, null);
    }

    @Override
    public Object visitVisualEffectImageExpr(HyperTalkParser.VisualEffectImageExprContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectName()), (Expression) visit(ctx.effectDirection()), null, (Expression) visit(ctx.effectImage()));
    }

    @Override
    public Object visitVisualEffectSpeedExpr(HyperTalkParser.VisualEffectSpeedExprContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectName()), (Expression) visit(ctx.effectDirection()), (Expression) visit(ctx.effectSpeed()), null);
    }

    @Override
    public Object visitVisualEffectSpeedImageExpr(HyperTalkParser.VisualEffectSpeedImageExprContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectName()), (Expression) visit(ctx.effectDirection()), (Expression) visit(ctx.effectSpeed()), (Expression) visit(ctx.effectImage()));
    }

    @Override
    public Object visitLiteralEffectNameExpr(HyperTalkParser.LiteralEffectNameExprContext ctx) {
        return new LiteralExp(ctx, ctx.getText());
    }

    @Override
    public Object visitExprEffectNameExpr(HyperTalkParser.ExprEffectNameExprContext ctx) {
        return visit(ctx.expression());
    }

    @Override
    public Object visitConvertToCmd(HyperTalkParser.ConvertToCmdContext ctx) {
        return new ConvertCmd(ctx, (Expression) visit(ctx.expression()), (Convertible) visit(ctx.convertible()));
    }

    @Override
    public Object visitConvertFromToCmd(HyperTalkParser.ConvertFromToCmdContext ctx) {
        return new ConvertCmd(ctx, (Expression) visit(ctx.expression()), (Convertible) visit(ctx.convertible(0)), (Convertible) visit(ctx.convertible(1)));
    }

    @Override
    public Object visitDualFormatConvertible(HyperTalkParser.DualFormatConvertibleContext ctx) {
        return new Convertible((ConvertibleDateFormat) visit(ctx.conversionFormat(0)), (ConvertibleDateFormat) visit(ctx.conversionFormat(1)));
    }

    @Override
    public Object visitSingleFormatConvertible(HyperTalkParser.SingleFormatConvertibleContext ctx) {
        return new Convertible((ConvertibleDateFormat) visit(ctx.conversionFormat()));
    }

    @Override
    public Object visitDateItemsConvFormat(HyperTalkParser.DateItemsConvFormatContext ctx) {
        return ConvertibleDateFormat.DATE_ITEMS;
    }

    @Override
    public Object visitDateConvFormat(HyperTalkParser.DateConvFormatContext ctx) {
        return ConvertibleDateFormat.ofDateLength((LengthAdjective) visit(ctx.length()));
    }

    @Override
    public Object visitTimeConvFormat(HyperTalkParser.TimeConvFormatContext ctx) {
        return ConvertibleDateFormat.ofTimeLength((LengthAdjective) visit(ctx.length()));
    }

    @Override
    public Object visitSecondsConvFormat(HyperTalkParser.SecondsConvFormatContext ctx) {
        return ConvertibleDateFormat.SECONDS;
    }

    @Override
    public Object visitSortDirectionAsc(HyperTalkParser.SortDirectionAscContext ctx) {
        return SortDirection.ASCENDING;
    }

    @Override
    public Object visitSortDirectionDesc(HyperTalkParser.SortDirectionDescContext ctx) {
        return SortDirection.DESCENDING;
    }

    @Override
    public Object visitSortDirectionDefault(HyperTalkParser.SortDirectionDefaultContext ctx) {
        return SortDirection.ASCENDING;
    }

    @Override
    public Object visitSortChunkLines(HyperTalkParser.SortChunkLinesContext ctx) {
        return ChunkType.LINE;
    }

    @Override
    public Object visitSortChunkItems(HyperTalkParser.SortChunkItemsContext ctx) {
        return ChunkType.ITEM;
    }

    @Override
    public Object visitSortChunkWords(HyperTalkParser.SortChunkWordsContext ctx) {
        return ChunkType.WORD;
    }

    @Override
    public Object visitSortChunkChars(HyperTalkParser.SortChunkCharsContext ctx) {
        return ChunkType.CHAR;
    }

    @Override
    public Object visitSortChunkDefault(HyperTalkParser.SortChunkDefaultContext ctx) {
        return ChunkType.LINE;
    }

    @Override
    public Object visitSortStyleText(HyperTalkParser.SortStyleTextContext ctx) {
        return SortStyle.TEXT;
    }

    @Override
    public Object visitSortStyleNumeric(HyperTalkParser.SortStyleNumericContext ctx) {
        return SortStyle.NUMERIC;
    }

    @Override
    public Object visitSortStyleInternational(HyperTalkParser.SortStyleInternationalContext ctx) {
        return SortStyle.INTERNATIONAL;
    }

    @Override
    public Object visitSortStyleDateTime(HyperTalkParser.SortStyleDateTimeContext ctx) {
        return SortStyle.DATE_TIME;
    }

    @Override
    public Object visitSortStyleDefault(HyperTalkParser.SortStyleDefaultContext ctx) {
        return SortStyle.TEXT;
    }

    @Override
    public Object visitCardWindowExpr(HyperTalkParser.CardWindowExprContext ctx) {
        return new WindowTypeExp(ctx, SingletonWindowType.CARD);
    }

    @Override
    public Object visitToolWindowExpr(HyperTalkParser.ToolWindowExprContext ctx) {
        return new WindowTypeExp(ctx, SingletonWindowType.TOOLS);
    }

    @Override
    public Object visitPatternWindowExpr(HyperTalkParser.PatternWindowExprContext ctx) {
        return new WindowTypeExp(ctx, SingletonWindowType.PATTERNS);
    }

    @Override
    public Object visitMessageWatcherExpr(HyperTalkParser.MessageWatcherExprContext ctx) {
        return new WindowTypeExp(ctx, SingletonWindowType.MESSAGE_WATCHER);
    }

    @Override
    public Object visitVariableWatcherExpr(HyperTalkParser.VariableWatcherExprContext ctx) {
        return new WindowTypeExp(ctx, SingletonWindowType.VARIABLE_WATCHER);
    }

    @Override
    public Object visitWindowNameExpr(HyperTalkParser.WindowNameExprContext ctx) {
        return new WindowNameExp(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitWindowIdExpr(HyperTalkParser.WindowIdExprContext ctx) {
        return new WindowIdExp(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitTicksTimeUnit(HyperTalkParser.TicksTimeUnitContext ctx) {
        return TimeUnit.TICKS;
    }

    @Override
    public Object visitSecondsTimeUnit(HyperTalkParser.SecondsTimeUnitContext ctx) {
        return TimeUnit.SECONDS;
    }

    @Override
    public Object visitGoCmd(HyperTalkParser.GoCmdContext ctx) {
        return new GoCmd(ctx, (Expression) visit(ctx.expression()), (RemoteNavigationOptions) visit(ctx.navigationOption()));
    }

    @Override
    public Object visitGoPosition(HyperTalkParser.GoPositionContext ctx) {
        return new GoPositionCmd(ctx, (Position) visit(ctx.position()));
    }

    @Override
    public Object visitGoOrdinal(HyperTalkParser.GoOrdinalContext ctx) {
        return new GoOrdinalCmd(ctx, (Ordinal) visit(ctx.ordinal()));
    }

    @Override
    public Object visitNextPosition(HyperTalkParser.NextPositionContext ctx) {
        return Position.NEXT;
    }

    @Override
    public Object visitPrevPosition(HyperTalkParser.PrevPositionContext ctx) {
        return Position.PREV;
    }

    @Override
    public Object visitThisPosition(HyperTalkParser.ThisPositionContext ctx) {
        return Position.THIS;
    }

    @Override
    public Object visitBackDirection(HyperTalkParser.BackDirectionContext ctx) {
        return Direction.BACK;
    }

    @Override
    public Object visitForthDirection(HyperTalkParser.ForthDirectionContext ctx) {
        return Direction.FORTH;
    }

    @Override
    public Object visitPropertyContainer(HyperTalkParser.PropertyContainerContext ctx) {
        return new PropertyExp(ctx, (PropertySpecifier) visit(ctx.property()));
    }

    @Override
    public Object visitMenuContainer(HyperTalkParser.MenuContainerContext ctx) {
        return new MenuExp(ctx, (MenuSpecifier) visit(ctx.menu()));
    }

    @Override
    public Object visitMenuItemContainer(HyperTalkParser.MenuItemContainerContext ctx) {
        return new MenuItemExp(ctx, (MenuItemSpecifier) visit(ctx.menuItem()));
    }

    @Override
    public Object visitEmptyScript(HyperTalkParser.EmptyScriptContext ctx) {
        return new Script();
    }

    @Override
    public Object visitSingleScriptlet(HyperTalkParser.SingleScriptletContext ctx) {
        return new Script(ctx, (Statement) visit(ctx.statement()));
    }

    @Override
    public Object visitMutliScriptlet(HyperTalkParser.MutliScriptletContext ctx) {
        return visit(ctx.multilineScriptlet());
    }

    @Override
    public Object visitStmntMultiScriptlet(HyperTalkParser.StmntMultiScriptletContext ctx) {
        return ((Script) visit(ctx.multilineScriptlet())).insertStatement(ctx, (Statement) visit(ctx.statement()));
    }

    @Override
    public Object visitStmntScriptlet(HyperTalkParser.StmntScriptletContext ctx) {
        return new Script(ctx, (Statement) visit(ctx.statement()));
    }

    @Override
    public Object visitWhitespaceScriptlet(HyperTalkParser.WhitespaceScriptletContext ctx) {
        return visit(ctx.multilineScriptlet());
    }

    @Override
    public Object visitEofScriptlet(HyperTalkParser.EofScriptletContext ctx) {
        return new Script();
    }

    @Override
    public Object visitNoArgHandler(HyperTalkParser.NoArgHandlerContext ctx) {
        StatementList statements = ctx.statementList() == null ? new StatementList() : (StatementList) visit(ctx.statementList());
        String onId = ctx.symbol().size() > 0 ? (String) visit(ctx.symbol(0)) : null;
        String endId = ctx.symbol().size() > 1 ? (String) visit(ctx.symbol(1)) : null;
        return new NamedBlock(ctx, onId, endId, statements);
    }

    @Override
    public Object visitArgHandler(HyperTalkParser.ArgHandlerContext ctx) {
        StatementList statements = ctx.statementList() == null ? new StatementList() : (StatementList) visit(ctx.statementList());
        String onId = ctx.symbol().size() > 0 ? (String) visit(ctx.symbol(0)) : null;
        String endId = ctx.symbol().size() > 1 ? (String) visit(ctx.symbol(1)) : null;
        return new NamedBlock(ctx, onId, endId, (ParameterList) visit(ctx.parameterList()), statements);
    }

    @Override
    public Object visitNoArgFunction(HyperTalkParser.NoArgFunctionContext ctx) {
        StatementList statements = ctx.statementList() == null ? new StatementList() : (StatementList) visit(ctx.statementList());
        String onId = ctx.symbol().size() > 0 ? (String) visit(ctx.symbol(0)) : null;
        String endId = ctx.symbol().size() > 1 ? (String) visit(ctx.symbol(1)) : null;
        return new UserFunction(ctx, onId, endId, new ParameterList(), statements);
    }

    @Override
    public Object visitArgFunction(HyperTalkParser.ArgFunctionContext ctx) {
        StatementList statements = ctx.statementList() == null ? new StatementList() : (StatementList) visit(ctx.statementList());
        String onId = ctx.symbol().size() > 0 ? (String) visit(ctx.symbol(0)) : null;
        String endId = ctx.symbol().size() > 1 ? (String) visit(ctx.symbol(1)) : null;
        return new UserFunction(ctx, onId, endId, (ParameterList) visit(ctx.parameterList()), statements);
    }

    @Override
    public Object visitSingleParamList(HyperTalkParser.SingleParamListContext ctx) {
        return new ParameterList((String) visit(ctx.symbol()));
    }

    @Override
    public Object visitMultiParamList(HyperTalkParser.MultiParamListContext ctx) {
        ParameterList parameterList = (ParameterList) visit(ctx.parameterList());
        parameterList.addParameter((String) visit(ctx.symbol()));
        return parameterList;
    }

    @Override
    public Object visitIdSymbol(HyperTalkParser.IdSymbolContext ctx) {
        return ctx.getText();
    }

    @Override
    public Object visitKeywordSymbol(HyperTalkParser.KeywordSymbolContext ctx) {
        return ctx.getText();
    }

    @Override
    public Object visitSingleStmntList(HyperTalkParser.SingleStmntListContext ctx) {
        return new StatementList((Statement) visit(ctx.statement()));
    }

    @Override
    public Object visitMultiStmntList(HyperTalkParser.MultiStmntListContext ctx) {
        StatementList statementList = (StatementList) visit(ctx.statementList());

        if (ctx.statement() != null) {
            statementList.prepend((Statement) visit(ctx.statement()));
        }

        return statementList;
    }

    @Override
    public Object visitCommandStmnt(HyperTalkParser.CommandStmntContext ctx) {
        return visit(ctx.commandStatement());
    }

    @Override
    public Object visitFuncStmnt(HyperTalkParser.FuncStmntContext ctx) {
        return new ExpressionStatement(ctx, (Expression) visit(ctx.functionCall()));
    }

    @Override
    public Object visitGlobalStmnt(HyperTalkParser.GlobalStmntContext ctx) {
        return visit(ctx.globalStatement());
    }

    @Override
    public Object visitIfStmnt(HyperTalkParser.IfStmntContext ctx) {
        return visit(ctx.ifStatement());
    }

    @Override
    public Object visitRepeatStmnt(HyperTalkParser.RepeatStmntContext ctx) {
        return visit(ctx.repeatStatement());
    }

    @Override
    public Object visitReturnStmnt(HyperTalkParser.ReturnStmntContext ctx) {
        return visit(ctx.returnStatement());
    }

    @Override
    public Object visitExpStmnt(HyperTalkParser.ExpStmntContext ctx) {
        return new ExpressionStatement(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitMsgStmnt(HyperTalkParser.MsgStmntContext ctx) {
        return super.visitMsgStmnt(ctx);
    }

    @Override
    public Object visitVoidReturnStmnt(HyperTalkParser.VoidReturnStmntContext ctx) {
        return new ReturnStatement(ctx);
    }

    @Override
    public Object visitEprReturnStmnt(HyperTalkParser.EprReturnStmntContext ctx) {
        return new ReturnStatement(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitGetCmd(HyperTalkParser.GetCmdContext ctx) {
        return new GetCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSetCmdStmnt(HyperTalkParser.SetCmdStmntContext ctx) {
        return new SetCmd(ctx, (PropertySpecifier) visit(ctx.property()), (Expression) visit(ctx.propertyValue()));
    }

    @Override
    public Object visitSendCmdStmnt(HyperTalkParser.SendCmdStmntContext ctx) {
        return new SendCmd(ctx, (Expression) visit(ctx.expression()), (ListExp) visit(ctx.listExpression()));
    }

    @Override
    public Object visitAddCmd(HyperTalkParser.AddCmdContext ctx) {
        return new AddCmd(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitSubtractCmd(HyperTalkParser.SubtractCmdContext ctx) {
        return new SubtractCmd(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitStartUsingCmd(HyperTalkParser.StartUsingCmdContext ctx) {
        return new StartUsingCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitTabKeyCmd(HyperTalkParser.TabKeyCmdContext ctx) {
        return new TabKeyCmd(ctx);
    }

    @Override
    public Object visitMultiplyCmd(HyperTalkParser.MultiplyCmdContext ctx) {
        return new MultiplyCmd(ctx, (Expression) visit(ctx.expression(1)), (Expression) visit(ctx.expression(0)));
    }

    @Override
    public Object visitDivideCmd(HyperTalkParser.DivideCmdContext ctx) {
        return new DivideCmd(ctx, (Expression) visit(ctx.expression(1)), (Expression) visit(ctx.expression(0)));
    }

    @Override
    public Object visitDoCmd(HyperTalkParser.DoCmdContext ctx) {
        return new DoCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitChooseToolCmd(HyperTalkParser.ChooseToolCmdContext ctx) {
        return new ChooseCmd(ctx, (Expression) visit(ctx.toolExpression()));
    }

    @Override
    public Object visitChooseToolNumberCmd(HyperTalkParser.ChooseToolNumberCmdContext ctx) {
        return new ChooseCmd(ctx, (Expression) visit(ctx.toolExpression()));
    }

    @Override
    public Object visitClickCmd(HyperTalkParser.ClickCmdContext ctx) {
        return new ClickCmd(ctx, (Expression) visit(ctx.listExpression()));
    }

    @Override
    public Object visitClickWithKeyCmd(HyperTalkParser.ClickWithKeyCmdContext ctx) {
        return new ClickCmd(ctx, (Expression) visit(ctx.listExpression(0)), (Expression) visit(ctx.listExpression(1)));
    }

    @Override
    public Object visitDragCmd(HyperTalkParser.DragCmdContext ctx) {
        return new DragCmd(ctx, (Expression) visit(ctx.listExpression(0)), (Expression) visit(ctx.listExpression(1)));
    }

    @Override
    public Object visitDragWithKeyCmd(HyperTalkParser.DragWithKeyCmdContext ctx) {
        return new DragCmd(ctx, (Expression) visit(ctx.listExpression(0)), (Expression) visit(ctx.listExpression(1)), (Expression) visit(ctx.listExpression(2)));
    }

    @Override
    public Object visitEditScriptCmd(HyperTalkParser.EditScriptCmdContext ctx) {
        return new EditScriptCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitTypeCmd(HyperTalkParser.TypeCmdContext ctx) {
        return new TypeCmd(ctx, (Expression) visit(ctx.expression()), null);
    }

    @Override
    public Object visitTypeWithCmdKeyCmd(HyperTalkParser.TypeWithCmdKeyCmdContext ctx) {
        return new TypeCmd(ctx, (Expression) visit(ctx.expression()), (Expression) visit(ctx.listExpression()));
    }

    @Override
    public Object visitPlayCmd(HyperTalkParser.PlayCmdContext ctx) {
        return new PlayCmd(ctx, (MusicalScore) visit(ctx.musicExpression()));
    }

    @Override
    public Object visitDialCmd(HyperTalkParser.DialCmdContext ctx) {
        return new DialCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitDisableCmd(HyperTalkParser.DisableCmdContext ctx) {
        return new EnableDisableCmd(ctx, (Expression) visit(ctx.expression()), false);
    }

    @Override
    public Object visitBeepCmd(HyperTalkParser.BeepCmdContext ctx) {
        return new BeepCmd(ctx);
    }

    @Override
    public Object visitBeepMultipleCmd(HyperTalkParser.BeepMultipleCmdContext ctx) {
        return new BeepCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitOpenFileCmd(HyperTalkParser.OpenFileCmdContext ctx) {
        return new OpenCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitCloseFileCmd(HyperTalkParser.CloseFileCmdContext ctx) {
        return new CloseCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitCloseCardWindowCmd(HyperTalkParser.CloseCardWindowCmdContext ctx) {
        return new CloseCardWindowCmd(ctx);
    }

    @Override
    public Object visitCloseWindowCmd(HyperTalkParser.CloseWindowCmdContext ctx) {
        return new CloseWindowCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitCommandKeyDownCmd(HyperTalkParser.CommandKeyDownCmdContext ctx) {
        return new CommandKeyDownCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitControlKeyCmd(HyperTalkParser.ControlKeyCmdContext ctx) {
        return new ControlKeyCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitOptionKeyCmd(HyperTalkParser.OptionKeyCmdContext ctx) {
        return new OptionKeyCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitNextRepeatCmd(HyperTalkParser.NextRepeatCmdContext ctx) {
        return new NextRepeatStatement(ctx);
    }

    @Override
    public Object visitExitRepeatCmd(HyperTalkParser.ExitRepeatCmdContext ctx) {
        return new ExitRepeatStatement(ctx);
    }

    @Override
    public Object visitExitCmd(HyperTalkParser.ExitCmdContext ctx) {
        return new ExitStatement(ctx, (String) visit(ctx.symbol()));
    }

    @Override
    public Object visitExitToHyperCardCmd(HyperTalkParser.ExitToHyperCardCmdContext ctx) {
        return new ExitToHyperCardStatement(ctx);
    }

    @Override
    public Object visitExportPaintCmd(HyperTalkParser.ExportPaintCmdContext ctx) {
        return new ExportPaintCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitPopCardCmd(HyperTalkParser.PopCardCmdContext ctx) {
        return new PopCardCmd(ctx);
    }

    @Override
    public Object visitPopCardIntoCmd(HyperTalkParser.PopCardIntoCmdContext ctx) {
        return new PopIntoCmd(ctx, (Preposition) visit(ctx.preposition()), (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitPushCardCmd(HyperTalkParser.PushCardCmdContext ctx) {
        return new PushCardCmd(ctx);
    }

    @Override
    public Object visitPushDestCmd(HyperTalkParser.PushDestCmdContext ctx) {
        return new PushCardCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitNoArgMsgCmdStmt(HyperTalkParser.NoArgMsgCmdStmtContext ctx) {
        return new MessageCmd(ctx, (String) visit(ctx.ID()), new ListExp(ctx));
    }

    @Override
    public Object visitArgMsgCmdStmt(HyperTalkParser.ArgMsgCmdStmtContext ctx) {
        return new MessageCmd(ctx, (String) visit(ctx.ID()), (ListExp) visit(ctx.listExpression()));
    }

    @Override
    public Object visitFindAnywhereCmd(HyperTalkParser.FindAnywhereCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 1 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 1 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        return new FindCmd(ctx, searchType, searchTerm, false);
    }

    @Override
    public Object visitFindFieldCmd(HyperTalkParser.FindFieldCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 2 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        Expression searchField = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(1)) : (Expression) visit(ctx.expression(2));
        return new FindCmd(ctx, searchType, searchTerm, searchField, false);
    }

    @Override
    public Object visitFindMarkedCardsCmd(HyperTalkParser.FindMarkedCardsCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 1 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 1 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        return new FindCmd(ctx, searchType, searchTerm, true);
    }

    @Override
    public Object visitFindFieldMarkedCardsCmd(HyperTalkParser.FindFieldMarkedCardsCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 2 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        Expression searchField = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(1)) : (Expression) visit(ctx.expression(2));
        return new FindCmd(ctx, searchType, searchTerm, searchField, true);
    }

    @Override
    public Object visitMusicInstrumentNotes(HyperTalkParser.MusicInstrumentNotesContext ctx) {
        return MusicalScore.ofNotes((Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitMusicInstrumentNotesTempo(HyperTalkParser.MusicInstrumentNotesTempoContext ctx) {
        return MusicalScore.ofNotesAndTempo((Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(2)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitMusicInstrumentTempo(HyperTalkParser.MusicInstrumentTempoContext ctx) {
        return MusicalScore.ofTempo((Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitSelectEmptyCmd(HyperTalkParser.SelectEmptyCmdContext ctx) {
        return new SelectEmptyCmd(ctx);
    }

    @Override
    public Object visitSelectTextCmd(HyperTalkParser.SelectTextCmdContext ctx) {
        return new SelectCmd(ctx, Preposition.INTO, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSelectAfterChunkCmd(HyperTalkParser.SelectAfterChunkCmdContext ctx) {
        return new SelectCmd(ctx, Preposition.AFTER, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSelectBeforeChunkCmd(HyperTalkParser.SelectBeforeChunkCmdContext ctx) {
        return new SelectCmd(ctx, Preposition.BEFORE, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSelectAfterCmd(HyperTalkParser.SelectAfterCmdContext ctx) {
        return new SelectCmd(ctx, Preposition.AFTER, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSelectBeforeCmd(HyperTalkParser.SelectBeforeCmdContext ctx) {
        return new SelectCmd(ctx, Preposition.BEFORE, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSelectChunkCmd(HyperTalkParser.SelectChunkCmdContext ctx) {
        return new SelectCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitWriteFileCmd(HyperTalkParser.WriteFileCmdContext ctx) {
        return WriteCmd.writeFile(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitWriteEndFileCmd(HyperTalkParser.WriteEndFileCmdContext ctx) {
        return WriteCmd.appendFile(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitWriteAtFileCmd(HyperTalkParser.WriteAtFileCmdContext ctx) {
        return WriteCmd.writeFileAt(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)), (Expression) visit(ctx.expression(2)));
    }

    @Override
    public Object visitRemoteInNewWindow(HyperTalkParser.RemoteInNewWindowContext ctx) {
        return new RemoteNavigationOptions(true, false);
    }

    @Override
    public Object visitRemoteInNewWindowWithoutDialog(HyperTalkParser.RemoteInNewWindowWithoutDialogContext ctx) {
        return new RemoteNavigationOptions(true, true);
    }

    @Override
    public Object visitRemoteWithoutDialog(HyperTalkParser.RemoteWithoutDialogContext ctx) {
        return new RemoteNavigationOptions(false, true);
    }

    @Override
    public Object visitRemoteDefault(HyperTalkParser.RemoteDefaultContext ctx) {
        return new RemoteNavigationOptions(false, false);
    }

    @Override
    public Object visitReadFileCmd(HyperTalkParser.ReadFileCmdContext ctx) {
        return ReadCmd.ofFile(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitReadFileForCmd(HyperTalkParser.ReadFileForCmdContext ctx) {
        return ReadCmd.ofFileFor(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitReadFileAtCmd(HyperTalkParser.ReadFileAtCmdContext ctx) {
        return ReadCmd.ofFileAt(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)), (Expression) visit(ctx.expression(2)));
    }

    @Override
    public Object visitReadFileUntil(HyperTalkParser.ReadFileUntilContext ctx) {
        return ReadCmd.ofFileUntil(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitMusicInstrument(HyperTalkParser.MusicInstrumentContext ctx) {
        return MusicalScore.ofSoundEffect((Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitLockScreenCmd(HyperTalkParser.LockScreenCmdContext ctx) {
        return new SetPropertyCmd(ctx, WyldCardProperties.PROP_LOCKSCREEN, new Value(true));
    }

    @Override
    public Object visitLockMessagesCmd(HyperTalkParser.LockMessagesCmdContext ctx) {
        return new SetPropertyCmd(ctx, WyldCardProperties.PROP_LOCKMESSAGES, new Value(true));
    }

    @Override
    public Object visitMarkAllCardsCmd(HyperTalkParser.MarkAllCardsCmdContext ctx) {
        return new MarkCmd(ctx, true, null, null, null, null, null);
    }

    @Override
    public Object visitMarkCardCmd(HyperTalkParser.MarkCardCmdContext ctx) {
        return new MarkCmd(ctx, true, (Expression) visit(ctx.expression()), null, null, null, null);
    }

    @Override
    public Object visitMarkCardsWhereCmd(HyperTalkParser.MarkCardsWhereCmdContext ctx) {
        return new MarkCmd(ctx, true, null, (Expression) visit(ctx.expression()), null, null, null);
    }

    @Override
    public Object visitMarkCardsFindingInFieldCmd(HyperTalkParser.MarkCardsFindingInFieldCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 2 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        Expression searchField = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(1)) : (Expression) visit(ctx.expression(2));
        return new MarkCmd(ctx, true, null, null, searchType, searchTerm, searchField);
    }

    @Override
    public Object visitMarkCardsFindingCmd(HyperTalkParser.MarkCardsFindingCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 1 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 1 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        return new MarkCmd(ctx, true, null, null, searchType, searchTerm, null);
    }

    @Override
    public Object visitUnmarkAllCardsCmd(HyperTalkParser.UnmarkAllCardsCmdContext ctx) {
        return new MarkCmd(ctx, false, null, null, null, null, null);
    }

    @Override
    public Object visitUnmarkCardCmd(HyperTalkParser.UnmarkCardCmdContext ctx) {
        return new MarkCmd(ctx, false, (Expression) visit(ctx.expression()), null, null, null, null);
    }

    @Override
    public Object visitUnmarkCardsWhereCmd(HyperTalkParser.UnmarkCardsWhereCmdContext ctx) {
        return new MarkCmd(ctx, false, null, (Expression) visit(ctx.expression()), null, null, null);
    }

    @Override
    public Object visitUnmarkCardsFindingInFieldCmd(HyperTalkParser.UnmarkCardsFindingInFieldCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 2 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        Expression searchField = ctx.expression().size() == 2 ? (Expression) visit(ctx.expression(1)) : (Expression) visit(ctx.expression(2));
        return new MarkCmd(ctx, false, null, null, searchType, searchTerm, searchField);
    }

    @Override
    public Object visitUnmarkCardsFindingCmd(HyperTalkParser.UnmarkCardsFindingCmdContext ctx) {
        Expression searchType = ctx.expression().size() == 1 ? null : (Expression) visit(ctx.expression(0));
        Expression searchTerm = ctx.expression().size() == 1 ? (Expression) visit(ctx.expression(0)) : (Expression) visit(ctx.expression(1));
        return new MarkCmd(ctx, true, null, null, searchType, searchTerm, null);
    }

    @Override
    public Object visitVisualEffectCmd(HyperTalkParser.VisualEffectCmdContext ctx) {
        return new VisualEffectCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitUnlockScreenCmd(HyperTalkParser.UnlockScreenCmdContext ctx) {
        return new UnlockScreenCmd(ctx);
    }

    @Override
    public Object visitUnlockScreenVisualCmd(HyperTalkParser.UnlockScreenVisualCmdContext ctx) {
        return new UnlockScreenCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitUnlockMessagesCmd(HyperTalkParser.UnlockMessagesCmdContext ctx) {
        return new SetPropertyCmd(ctx, WyldCardProperties.PROP_LOCKMESSAGES, new Value(false));
    }

    @Override
    public Object visitPassCmd(HyperTalkParser.PassCmdContext ctx) {
        return new PassCmd(ctx, (String) visit(ctx.symbol()));
    }

    @Override
    public Object visitDoMenuCmd(HyperTalkParser.DoMenuCmdContext ctx) {
        return new DoMenuCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitResetMenuCmd(HyperTalkParser.ResetMenuCmdContext ctx) {
        return new ResetMenuCmd(ctx);
    }

    @Override
    public Object visitResetPaintCmd(HyperTalkParser.ResetPaintCmdContext ctx) {
        return new ResetPaintCmd(ctx);
    }

    @Override
    public Object visitSaveThisStackAsCmd(HyperTalkParser.SaveThisStackAsCmdContext ctx) {
        return new SaveStackCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitSaveStackAsCmd(HyperTalkParser.SaveStackAsCmdContext ctx) {
        return new SaveStackCmd(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitCreateMenuCmd(HyperTalkParser.CreateMenuCmdContext ctx) {
        return new CreateMenuCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitDebugCheckpointCmd(HyperTalkParser.DebugCheckpointCmdContext ctx) {
        return new DebugCheckpointCmd(ctx);
    }

    @Override
    public Object visitDeleteCmd(HyperTalkParser.DeleteCmdContext ctx) {
        return new DeleteCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitEnableCmd(HyperTalkParser.EnableCmdContext ctx) {
        return new EnableDisableCmd(ctx, (Expression) visit(ctx.expression()), true);
    }

    @Override
    public Object visitEnterInFieldCmd(HyperTalkParser.EnterInFieldCmdContext ctx) {
        return new EnterInFieldCmd(ctx);
    }

    @Override
    public Object visitEnterKeyCmd(HyperTalkParser.EnterKeyCmdContext ctx) {
        return new EnterKeyCmd(ctx);
    }

    @Override
    public Object visitIfStatement(HyperTalkParser.IfStatementContext ctx) {
        return new IfStatement(ctx, (Expression) visit(ctx.expression()), (ThenElseBlock) visit(ctx.thenStatement()));
    }

    @Override
    public Object visitThenSingleLineStmnt(HyperTalkParser.ThenSingleLineStmntContext ctx) {
        return new ThenElseBlock((Statement) visit(ctx.statement()), null);
    }

    @Override
    public Object visitThenSingleStmnt(HyperTalkParser.ThenSingleStmntContext ctx) {
        return new ThenElseBlock((Statement) visit(ctx.statement()), ctx.elseStatement() == null ? null : (Statement) visit(ctx.elseStatement()));
    }

    @Override
    public Object visitThenStmntList(HyperTalkParser.ThenStmntListContext ctx) {
        return new ThenElseBlock(ctx.statementList() == null ? new StatementList() : (Statement) visit(ctx.statementList()), ctx.elseStatement() == null ? null : (Statement) visit(ctx.elseStatement()));
    }

    @Override
    public Object visitElseSingleStmt(HyperTalkParser.ElseSingleStmtContext ctx) {
        return visit(ctx.statement());
    }

    @Override
    public Object visitElseStmntList(HyperTalkParser.ElseStmntListContext ctx) {
        return ctx.statementList() == null ? new StatementList() : visit(ctx.statementList());
    }

    @Override
    public Object visitRepeatStmntList(HyperTalkParser.RepeatStmntListContext ctx) {
        return new RepeatStatement(ctx, (RepeatSpecifier) visit(ctx.repeatRange()), (StatementList) visit(ctx.statementList()));
    }

    @Override
    public Object visitRepeatEmpty(HyperTalkParser.RepeatEmptyContext ctx) {
        return new RepeatStatement(ctx, (RepeatSpecifier) visit(ctx.repeatRange()), new StatementList());
    }

    @Override
    public Object visitInfiniteLoop(HyperTalkParser.InfiniteLoopContext ctx) {
        return new RepeatForever();
    }

    @Override
    public Object visitDurationLoop(HyperTalkParser.DurationLoopContext ctx) {
        return visit(ctx.duration());
    }

    @Override
    public Object visitCountLoop(HyperTalkParser.CountLoopContext ctx) {
        return visit(ctx.count());
    }

    @Override
    public Object visitWithLoop(HyperTalkParser.WithLoopContext ctx) {
        return new RepeatWith((String) visit(ctx.ID()), (RepeatRange) visit(ctx.range()));
    }

    @Override
    public Object visitUntilDuration(HyperTalkParser.UntilDurationContext ctx) {
        return new RepeatDuration(RepeatDuration.POLARITY_UNTIL, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitWhileDuration(HyperTalkParser.WhileDurationContext ctx) {
        return new RepeatDuration(RepeatDuration.POLARITY_WHILE, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitCount(HyperTalkParser.CountContext ctx) {
        return new RepeatCount((Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitRangeDownTo(HyperTalkParser.RangeDownToContext ctx) {
        return new RepeatRange(RepeatRange.POLARITY_DOWNTO, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitRangeUpTo(HyperTalkParser.RangeUpToContext ctx) {
        return new RepeatRange(RepeatRange.POLARITY_UPTO, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitGlobalStatement(HyperTalkParser.GlobalStatementContext ctx) {
        return new GlobalStatement(ctx, (ParameterList) visit(ctx.parameterList()));
    }

    @Override
    public Object visitAnswerThreeButtonCmd(HyperTalkParser.AnswerThreeButtonCmdContext ctx) {
        return new AnswerCmd(ctx, (Expression) visit(ctx.expression()), (Expression) visit(ctx.term(0)), (Expression) visit(ctx.term(1)), (Expression) visit(ctx.term(2)));
    }

    @Override
    public Object visitAnswerTwoButtonCmd(HyperTalkParser.AnswerTwoButtonCmdContext ctx) {
        return new AnswerCmd(ctx, (Expression) visit(ctx.expression()), (Expression) visit(ctx.term(0)), (Expression) visit(ctx.term(1)));
    }

    @Override
    public Object visitAnswerOneButtonCmd(HyperTalkParser.AnswerOneButtonCmdContext ctx) {
        return new AnswerCmd(ctx, (Expression) visit(ctx.expression()), (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitAnswerDefaultCmd(HyperTalkParser.AnswerDefaultCmdContext ctx) {
        return new AnswerCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitAnswerFileCmd(HyperTalkParser.AnswerFileCmdContext ctx) {
        return new AnswerFileCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitAnswerFileTypeCmd(HyperTalkParser.AnswerFileTypeCmdContext ctx) {
        return new AnswerFileCmd(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitArrowKeyCmd(HyperTalkParser.ArrowKeyCmdContext ctx) {
        return new ArrowKeyCmd(ctx, (Expression) visit(ctx.arrowExpression()));
    }

    @Override
    public Object visitAskExpWithCmd(HyperTalkParser.AskExpWithCmdContext ctx) {
        return new AskCmd(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitAskExpCmd(HyperTalkParser.AskExpCmdContext ctx) {
        return new AskCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitAskFileCmd(HyperTalkParser.AskFileCmdContext ctx) {
        return new AskFileCmd(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitAskFileWithCmd(HyperTalkParser.AskFileWithCmdContext ctx) {
        return new AskFileCmd(ctx, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitAskPasswordCmd(HyperTalkParser.AskPasswordCmdContext ctx) {
        return new AskPasswordCmd(ctx, false, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitAskPasswordWithCmd(HyperTalkParser.AskPasswordWithCmdContext ctx) {
        return new AskPasswordCmd(ctx, false, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitAskPasswordClearCmd(HyperTalkParser.AskPasswordClearCmdContext ctx) {
        return new AskPasswordCmd(ctx, true, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitAskPasswordClearWithCmd(HyperTalkParser.AskPasswordClearWithCmdContext ctx) {
        return new AskPasswordCmd(ctx, true, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitPutIntoCmd(HyperTalkParser.PutIntoCmdContext ctx) {
        return new PutCmd(ctx, (Expression) visit(ctx.listExpression()), Preposition.INTO, new MsgBoxExp(ctx));
    }

    @Override
    public Object visitPutPrepositionCmd(HyperTalkParser.PutPrepositionCmdContext ctx) {
        return new PutCmd(ctx, (Expression) visit(ctx.listExpression()), (Preposition) visit(ctx.preposition()), (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitPutWithMenuMessagesCmd(HyperTalkParser.PutWithMenuMessagesCmdContext ctx) {
        return new PutMenuMessagesCmd(ctx, (ListExp) visit(ctx.listExpression(0)), (Preposition) visit(ctx.preposition()), (Expression) visit(ctx.expression()), (ListExp) visit(ctx.listExpression(1)));
    }

    @Override
    public Object visitBeforePreposition(HyperTalkParser.BeforePrepositionContext ctx) {
        return Preposition.BEFORE;
    }

    @Override
    public Object visitAfterPreposition(HyperTalkParser.AfterPrepositionContext ctx) {
        return Preposition.AFTER;
    }

    @Override
    public Object visitIntoPreposition(HyperTalkParser.IntoPrepositionContext ctx) {
        return Preposition.INTO;
    }

    @Override
    public Object visitVariableContainer(HyperTalkParser.VariableContainerContext ctx) {
        return new VariableExp(ctx, (String) visit(ctx.symbol()));
    }

    @Override
    public Object visitCompositeChunk(HyperTalkParser.CompositeChunkContext ctx) {
        Chunk lChunk = (Chunk) visit(ctx.chunk(0));
        Chunk rChunk = (Chunk) visit(ctx.chunk(1));
        return new CompositeChunk(rChunk.type, rChunk.start, rChunk.end, lChunk);
    }

    @Override
    public Object visitPartContainer(HyperTalkParser.PartContainerContext ctx) {
        return visit(ctx.part());
    }

    @Override
    public Object visitMessage(HyperTalkParser.MessageContext ctx) {
        return super.visitMessage(ctx);
    }

    @Override
    public Object visitCards(HyperTalkParser.CardsContext ctx) {
        return super.visitCards(ctx);
    }

    @Override
    public Object visitSelectionContainer(HyperTalkParser.SelectionContainerContext ctx) {
        return new SelectionExp(ctx);
    }

    @Override
    public Object visitTargetContainer(HyperTalkParser.TargetContainerContext ctx) {
        return new TargetExp(ctx);
    }

    @Override
    public Object visitExpressionMenu(HyperTalkParser.ExpressionMenuContext ctx) {
        return new MenuSpecifier((Expression) visit(ctx.term()));
    }

    @Override
    public Object visitOrdinalMenu(HyperTalkParser.OrdinalMenuContext ctx) {
        return new MenuSpecifier((Ordinal) visit(ctx.ordinal()));
    }

    @Override
    public Object visitExpressionMenuItem(HyperTalkParser.ExpressionMenuItemContext ctx) {
        return new MenuItemSpecifier((Expression) visit(ctx.term()), (MenuSpecifier) visit(ctx.menu()));
    }

    @Override
    public Object visitOrdinalMenuItem(HyperTalkParser.OrdinalMenuItemContext ctx) {
        return new MenuItemSpecifier((Ordinal) visit(ctx.ordinal()), (MenuSpecifier) visit(ctx.menu()));
    }

    @Override
    public Object visitPropertyValueExp(HyperTalkParser.PropertyValueExpContext ctx) {
        return visit(ctx.listExpression());
    }

    @Override
    public Object visitKeyword(HyperTalkParser.KeywordContext ctx) {
        return ctx.getText();
    }

    @Override
    public Object visitPropertySpecGlobal(HyperTalkParser.PropertySpecGlobalContext ctx) {
        return new PropertySpecifier((String) visit(ctx.symbol()));
    }

    @Override
    public Object visitPropertySpecPart(HyperTalkParser.PropertySpecPartContext ctx) {
        return new PropertySpecifier((String) visit(ctx.symbol()), (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitLengthPropertySpecPart(HyperTalkParser.LengthPropertySpecPartContext ctx) {
        return new PropertySpecifier((LengthAdjective) visit(ctx.length()), (String) visit(ctx.symbol()), (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitPicture(HyperTalkParser.PictureContext ctx) {
        return super.visitPicture(ctx);
    }

    @Override
    public Object visitSeconds(HyperTalkParser.SecondsContext ctx) {
        return super.visitSeconds(ctx);
    }

    @Override
    public Object visitVisualEffectNameExpr(HyperTalkParser.VisualEffectNameExprContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectNameExpresssion()), (Expression) visit(ctx.effectDirection()), null, null);
    }

    @Override
    public Object visitVisualEffectNameImageExpr(HyperTalkParser.VisualEffectNameImageExprContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectNameExpresssion()), (Expression) visit(ctx.effectDirection()), null, (Expression) visit(ctx.effectImage()));
    }

    @Override
    public Object visitVisualEffectNameSpeedExpr(HyperTalkParser.VisualEffectNameSpeedExprContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectNameExpresssion()), (Expression) visit(ctx.effectDirection()), (Expression) visit(ctx.effectSpeed()), null);
    }

    @Override
    public Object visitVisualEffectNameSpeedImageExpr(HyperTalkParser.VisualEffectNameSpeedImageExprContext ctx) {
        return new VisualEffectExp(ctx, (Expression) visit(ctx.effectNameExpresssion()), (Expression) visit(ctx.effectDirection()), (Expression) visit(ctx.effectSpeed()), (Expression) visit(ctx.effectImage()));
    }

    @Override
    public Object visitLiteralEffectName(HyperTalkParser.LiteralEffectNameContext ctx) {
        return new LiteralExp(ctx, ctx.getText());
    }

    @Override
    public Object visitLiteralEffectDirection(HyperTalkParser.LiteralEffectDirectionContext ctx) {
        return new LiteralExp(ctx, ctx.getText());
    }

    @Override
    public Object visitEmptyEffectDirection(HyperTalkParser.EmptyEffectDirectionContext ctx) {
        return new LiteralExp(ctx, "");
    }

    @Override
    public Object visitExpressionEffectDirection(HyperTalkParser.ExpressionEffectDirectionContext ctx) {
        return visit(ctx.expression());
    }

    @Override
    public Object visitLiteralEffectSpeed(HyperTalkParser.LiteralEffectSpeedContext ctx) {
        return new LiteralExp(ctx, ctx.getText());
    }

    @Override
    public Object visitExpressionEffectSpeed(HyperTalkParser.ExpressionEffectSpeedContext ctx) {
        return visit(ctx.expression());
    }

    @Override
    public Object visitLiteralEffectImage(HyperTalkParser.LiteralEffectImageContext ctx) {
        return new LiteralExp(ctx, ctx.getText());
    }

    @Override
    public Object visitExpressionEffectImage(HyperTalkParser.ExpressionEffectImageContext ctx) {
        return visit(ctx.expression());
    }

    @Override
    public Object visitButtonPartPart(HyperTalkParser.ButtonPartPartContext ctx) {
        return visit(ctx.buttonPart());
    }

    @Override
    public Object visitFieldPartPart(HyperTalkParser.FieldPartPartContext ctx) {
        return visit(ctx.fieldPart());
    }

    @Override
    public Object visitBkgndPartPart(HyperTalkParser.BkgndPartPartContext ctx) {
        return visit(ctx.bkgndPart());
    }

    @Override
    public Object visitCardPartPart(HyperTalkParser.CardPartPartContext ctx) {
        return visit(ctx.cardPart());
    }

    @Override
    public Object visitStackPartPart(HyperTalkParser.StackPartPartContext ctx) {
        return visit(ctx.stackPart());
    }

    @Override
    public Object visitWindowPartPart(HyperTalkParser.WindowPartPartContext ctx) {
        return visit(ctx.windowPart());
    }

    @Override
    public Object visitHypercardPart(HyperTalkParser.HypercardPartContext ctx) {
        return new HyperCardPartExp(ctx);
    }

    @Override
    public Object visitThisStackPart(HyperTalkParser.ThisStackPartContext ctx) {
        return new StackPartExp(ctx);
    }

    @Override
    public Object visitAnotherStackPart(HyperTalkParser.AnotherStackPartContext ctx) {
        return new StackPartExp(ctx, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndFieldPart(HyperTalkParser.BkgndFieldPartContext ctx) {
        return new PartNameExp(ctx, Owner.BACKGROUND, PartType.FIELD, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndFieldOrdinalPart(HyperTalkParser.BkgndFieldOrdinalPartContext ctx) {
        return new PartNumberExp(ctx, Owner.BACKGROUND, PartType.FIELD, (Ordinal) visit(ctx.ordinal()), false);
    }

    @Override
    public Object visitBkgndFieldIdPart(HyperTalkParser.BkgndFieldIdPartContext ctx) {
        return new PartIdExp(ctx, Owner.BACKGROUND, PartType.FIELD, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndButtonPart(HyperTalkParser.BkgndButtonPartContext ctx) {
        return new PartNameExp(ctx, Owner.BACKGROUND, PartType.BUTTON, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitButtonOfCardPart(HyperTalkParser.ButtonOfCardPartContext ctx) {
        return new CompositePartExp(ctx, (PartExp) visit(ctx.buttonPart()), (PartExp) visit(ctx.cardPart()));
    }

    @Override
    public Object visitBkgndButtonOrdinalPart(HyperTalkParser.BkgndButtonOrdinalPartContext ctx) {
        return new PartNumberExp(ctx, Owner.BACKGROUND, PartType.BUTTON, (Ordinal) visit(ctx.ordinal()), false);
    }

    @Override
    public Object visitBkgndButtonIdPart(HyperTalkParser.BkgndButtonIdPartContext ctx) {
        return new PartIdExp(ctx, Owner.BACKGROUND, PartType.BUTTON, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardFieldPart(HyperTalkParser.CardFieldPartContext ctx) {
        return new PartNameExp(ctx, Owner.CARD, PartType.FIELD, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitFieldOfCardPart(HyperTalkParser.FieldOfCardPartContext ctx) {
        return new CompositePartExp(ctx, (PartExp) visit(ctx.fieldPart()), (PartExp) visit(ctx.cardPart()));
    }

    @Override
    public Object visitCardFieldOrdinalPart(HyperTalkParser.CardFieldOrdinalPartContext ctx) {
        return new PartNumberExp(ctx, Owner.CARD, PartType.FIELD, (Ordinal) visit(ctx.ordinal()), false);
    }

    @Override
    public Object visitCardFieldIdPart(HyperTalkParser.CardFieldIdPartContext ctx) {
        return new PartIdExp(ctx, Owner.CARD, PartType.FIELD, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardButtonPart(HyperTalkParser.CardButtonPartContext ctx) {
        return new PartNameExp(ctx, Owner.CARD, PartType.BUTTON, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardButtonOrdinalPart(HyperTalkParser.CardButtonOrdinalPartContext ctx) {
        return new PartNumberExp(ctx, Owner.CARD, PartType.BUTTON, (Ordinal) visit(ctx.ordinal()), false);
    }

    @Override
    public Object visitCardButtonIdPart(HyperTalkParser.CardButtonIdPartContext ctx) {
        return new PartIdExp(ctx, Owner.CARD, PartType.BUTTON, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardPartNumberPart(HyperTalkParser.CardPartNumberPartContext ctx) {
        return new PartNumberExp(ctx, Owner.CARD, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndPartNumberPart(HyperTalkParser.BkgndPartNumberPartContext ctx) {
        return new PartNumberExp(ctx, Owner.BACKGROUND, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitMePart(HyperTalkParser.MePartContext ctx) {
        return new PartMeExp(ctx);
    }

    @Override
    public Object visitMsgPart(HyperTalkParser.MsgPartContext ctx) {
        return new PartMessageExp(ctx);
    }

    @Override
    public Object visitCard(HyperTalkParser.CardContext ctx) {
        return super.visitCard(ctx);
    }

    @Override
    public Object visitBackground(HyperTalkParser.BackgroundContext ctx) {
        return super.visitBackground(ctx);
    }

    @Override
    public Object visitButton(HyperTalkParser.ButtonContext ctx) {
        return super.visitButton(ctx);
    }

    @Override
    public Object visitField(HyperTalkParser.FieldContext ctx) {
        return super.visitField(ctx);
    }

    @Override
    public Object visitStack(HyperTalkParser.StackContext ctx) {
        return super.visitStack(ctx);
    }

    @Override
    public Object visitCharacter(HyperTalkParser.CharacterContext ctx) {
        return super.visitCharacter(ctx);
    }

    @Override
    public Object visitWord(HyperTalkParser.WordContext ctx) {
        return super.visitWord(ctx);
    }

    @Override
    public Object visitLine(HyperTalkParser.LineContext ctx) {
        return super.visitLine(ctx);
    }

    @Override
    public Object visitItem(HyperTalkParser.ItemContext ctx) {
        return super.visitItem(ctx);
    }

    @Override
    public Object visitOf(HyperTalkParser.OfContext ctx) {
        return super.visitOf(ctx);
    }

    @Override
    public Object visitHypercard(HyperTalkParser.HypercardContext ctx) {
        return super.visitHypercard(ctx);
    }

    @Override
    public Object visitMenuMessage(HyperTalkParser.MenuMessageContext ctx) {
        return super.visitMenuMessage(ctx);
    }

    @Override
    public Object visitThisCardPart(HyperTalkParser.ThisCardPartContext ctx) {
        return new PartPositionExp(ctx, PartType.CARD, Position.THIS);
    }

    @Override
    public Object visitThisBkgndPart(HyperTalkParser.ThisBkgndPartContext ctx) {
        return new PartPositionExp(ctx, PartType.BACKGROUND, Position.THIS);
    }

    @Override
    public Object visitBkgndOfStackPart(HyperTalkParser.BkgndOfStackPartContext ctx) {
        return new CompositePartExp(ctx, (PartExp) visit(ctx.bkgndPart()), (PartExp) visit(ctx.stackPart()));
    }

    @Override
    public Object visitPositionCardPart(HyperTalkParser.PositionCardPartContext ctx) {
        return new PartPositionExp(ctx, PartType.CARD, (Position) visit(ctx.position()));
    }

    @Override
    public Object visitCardOfBkgndPart(HyperTalkParser.CardOfBkgndPartContext ctx) {
        return new CompositePartExp(ctx, (PartExp) visit(ctx.cardPart()), (PartExp) visit(ctx.bkgndPart()));
    }

    @Override
    public Object visitOrdinalMarkedCardPart(HyperTalkParser.OrdinalMarkedCardPartContext ctx) {
        return new PartNumberExp(ctx, PartType.CARD, (Ordinal) visit(ctx.ordinal()), true);
    }

    @Override
    public Object visitPositionBkgndPart(HyperTalkParser.PositionBkgndPartContext ctx) {
        return new PartPositionExp(ctx, PartType.BACKGROUND, (Position) visit(ctx.position()));
    }

    @Override
    public Object visitSingletonListExp(HyperTalkParser.SingletonListExpContext ctx) {
        return new ListExp(ctx, (Expression) visit(ctx.expression()), null);
    }

    @Override
    public Object visitOrdinalCardPart(HyperTalkParser.OrdinalCardPartContext ctx) {
        return new PartNumberExp(ctx, PartType.CARD, (Ordinal) visit(ctx.ordinal()), false);
    }

    @Override
    public Object visitRecentCardPart(HyperTalkParser.RecentCardPartContext ctx) {
        return new PartDirectionExp(ctx, Direction.BACK);
    }

    @Override
    public Object visitCardOfStackPart(HyperTalkParser.CardOfStackPartContext ctx) {
        return new CompositePartExp(ctx, (PartExp) visit(ctx.cardPart()), (PartExp) visit(ctx.stackPart()));
    }

    @Override
    public Object visitDirectionCardPart(HyperTalkParser.DirectionCardPartContext ctx) {
        return new PartDirectionExp(ctx, (Direction) visit(ctx.direction()));
    }

    @Override
    public Object visitOrdinalBkgndPart(HyperTalkParser.OrdinalBkgndPartContext ctx) {
        return new PartNumberExp(ctx, PartType.BACKGROUND, (Ordinal) visit(ctx.ordinal()), false);
    }

    @Override
    public Object visitExpressionCardPart(HyperTalkParser.ExpressionCardPartContext ctx) {
        return new PartNameExp(ctx, PartType.CARD, (Expression) visit(ctx.term()), false);
    }

    @Override
    public Object visitCardIdPart(HyperTalkParser.CardIdPartContext ctx) {
        return new PartIdExp(ctx, PartType.CARD, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitPositionMarkedCardPart(HyperTalkParser.PositionMarkedCardPartContext ctx) {
        return new PartPositionExp(ctx, PartType.CARD, (Position) visit(ctx.position()), true);
    }

    @Override
    public Object visitMarkedCardExpressionPart(HyperTalkParser.MarkedCardExpressionPartContext ctx) {
        return new PartNameExp(ctx, PartType.CARD, (Expression) visit(ctx.term()), true);
    }

    @Override
    public Object visitExpressionBkgndPart(HyperTalkParser.ExpressionBkgndPartContext ctx) {
        return new PartNameExp(ctx, PartType.BACKGROUND, (Expression) visit(ctx.term()), false);
    }

    @Override
    public Object visitBkgndIdPart(HyperTalkParser.BkgndIdPartContext ctx) {
        return new PartIdExp(ctx, PartType.BACKGROUND, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitOrdinalCharChunk(HyperTalkParser.OrdinalCharChunkContext ctx) {
        return new Chunk(ChunkType.CHAR, new LiteralExp(ctx, ((Ordinal) visit(ctx.ordinal())).stringValue()));
    }

    @Override
    public Object visitRangeCharChunk(HyperTalkParser.RangeCharChunkContext ctx) {
        return new Chunk(ChunkType.CHARRANGE, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitCharCharChunk(HyperTalkParser.CharCharChunkContext ctx) {
        return new Chunk(ChunkType.CHAR, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitOrdinalWordChunk(HyperTalkParser.OrdinalWordChunkContext ctx) {
        return new Chunk(ChunkType.WORD, new LiteralExp(ctx, ((Ordinal) visit(ctx.ordinal())).stringValue()));
    }

    @Override
    public Object visitRangeWordChunk(HyperTalkParser.RangeWordChunkContext ctx) {
        return new Chunk(ChunkType.WORDRANGE, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitWordWordChunk(HyperTalkParser.WordWordChunkContext ctx) {
        return new Chunk(ChunkType.WORD, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitOrdinalItemChunk(HyperTalkParser.OrdinalItemChunkContext ctx) {
        return new Chunk(ChunkType.ITEM, new LiteralExp(ctx, ((Ordinal) visit(ctx.ordinal())).stringValue()));
    }

    @Override
    public Object visitRangeItemChunk(HyperTalkParser.RangeItemChunkContext ctx) {
        return new Chunk(ChunkType.ITEMRANGE, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitItemItemChunk(HyperTalkParser.ItemItemChunkContext ctx) {
        return new Chunk(ChunkType.ITEM, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitOrdinalLineChunk(HyperTalkParser.OrdinalLineChunkContext ctx) {
        return new Chunk(ChunkType.LINE, new LiteralExp(ctx, ((Ordinal) visit(ctx.ordinal())).stringValue()));
    }

    @Override
    public Object visitRangeLineChunk(HyperTalkParser.RangeLineChunkContext ctx) {
        return new Chunk(ChunkType.LINERANGE, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitLineLineChunk(HyperTalkParser.LineLineChunkContext ctx) {
        return new Chunk(ChunkType.LINE, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitListExp(HyperTalkParser.ListExpContext ctx) {
        return new ListExp(ctx, (Expression) visit(ctx.expression()), (ListExp) visit(ctx.listExpression()));
    }

    @Override
    public Object visitBinaryOpExp(HyperTalkParser.BinaryOpExpContext ctx) {
        return BinaryOperatorExp.forOperator(ctx, BinaryOperator.fromName(ctx.op.getText()), (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitPowOpExp(HyperTalkParser.PowOpExpContext ctx) {
        return BinaryOperatorExp.forOperator(ctx, BinaryOperator.EXP, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitBinaryAndExp(HyperTalkParser.BinaryAndExpContext ctx) {
        return BinaryOperatorExp.forOperator(ctx, BinaryOperator.AND, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitBinaryOrExp(HyperTalkParser.BinaryOrExpContext ctx) {
        return BinaryOperatorExp.forOperator(ctx, BinaryOperator.OR, (Expression) visit(ctx.expression(0)), (Expression) visit(ctx.expression(1)));
    }

    @Override
    public Object visitFunctionTerm(HyperTalkParser.FunctionTermContext ctx) {
        return visit(ctx.functionCall());
    }

    @Override
    public Object visitNegateExp(HyperTalkParser.NegateExpContext ctx) {
        return UnaryOperatorExp.forOperator(ctx, UnaryOperator.NEGATE, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitNotExp(HyperTalkParser.NotExpContext ctx) {
        return UnaryOperatorExp.forOperator(ctx, UnaryOperator.NOT, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitUnaryOpExp(HyperTalkParser.UnaryOpExpContext ctx) {
        return UnaryOperatorExp.forOperator(ctx, UnaryOperator.fromName(ctx.op.getText()), (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitFactorExp(HyperTalkParser.FactorExpContext ctx) {
        return visit(ctx.term());
    }

    @Override
    public Object visitUserArgFuncCall(HyperTalkParser.UserArgFuncCallContext ctx) {
        ListExp arguments = ctx.listExpression() == null ? new ListExp(ctx) : (ListExp) visit(ctx.listExpression());
        return new UserFunctionExp(ctx, (String) visit(ctx.ID()), arguments);
    }

    @Override
    public Object visitMouseFunc(HyperTalkParser.MouseFuncContext ctx) {
        return BuiltInFunction.MOUSE;
    }

    @Override
    public Object visitMouseHFunc(HyperTalkParser.MouseHFuncContext ctx) {
        return BuiltInFunction.MOUSEH;
    }

    @Override
    public Object visitMouseVFunc(HyperTalkParser.MouseVFuncContext ctx) {
        return BuiltInFunction.MOUSEV;
    }

    @Override
    public Object visitMouseLocFunc(HyperTalkParser.MouseLocFuncContext ctx) {
        return BuiltInFunction.MOUSELOC;
    }

    @Override
    public Object visitResultFunc(HyperTalkParser.ResultFuncContext ctx) {
        return BuiltInFunction.RESULT;
    }

    @Override
    public Object visitOptionKeyFunc(HyperTalkParser.OptionKeyFuncContext ctx) {
        return BuiltInFunction.OPTION_KEY;
    }

    @Override
    public Object visitShiftKeyFunc(HyperTalkParser.ShiftKeyFuncContext ctx) {
        return BuiltInFunction.SHIFT_KEY;
    }

    @Override
    public Object visitCommandKeyFunc(HyperTalkParser.CommandKeyFuncContext ctx) {
        return BuiltInFunction.COMMAND_KEY;
    }

    @Override
    public Object visitClickHFunc(HyperTalkParser.ClickHFuncContext ctx) {
        return BuiltInFunction.CLICKH;
    }

    @Override
    public Object visitClickChunkFunc(HyperTalkParser.ClickChunkFuncContext ctx) {
        return BuiltInFunction.CLICKCHUNK;
    }

    @Override
    public Object visitClickLocFunc(HyperTalkParser.ClickLocFuncContext ctx) {
        return BuiltInFunction.CLICKLOC;
    }

    @Override
    public Object visitClickLineFunc(HyperTalkParser.ClickLineFuncContext ctx) {
        return BuiltInFunction.CLICKLINE;
    }

    @Override
    public Object visitClickTextFunc(HyperTalkParser.ClickTextFuncContext ctx) {
        return BuiltInFunction.CLICKTEXT;
    }

    @Override
    public Object visitClickVFunc(HyperTalkParser.ClickVFuncContext ctx) {
        return BuiltInFunction.CLICKV;
    }

    @Override
    public Object visitFoundChunkFunc(HyperTalkParser.FoundChunkFuncContext ctx) {
        return BuiltInFunction.FOUNDCHUNK;
    }

    @Override
    public Object visitFoundFieldFunc(HyperTalkParser.FoundFieldFuncContext ctx) {
        return BuiltInFunction.FOUNDFIELD;
    }

    @Override
    public Object visitFoundLineFunc(HyperTalkParser.FoundLineFuncContext ctx) {
        return BuiltInFunction.FOUNDLINE;
    }

    @Override
    public Object visitFoundTextFunc(HyperTalkParser.FoundTextFuncContext ctx) {
        return BuiltInFunction.FOUNDTEXT;
    }

    @Override
    public Object visitTicksFunc(HyperTalkParser.TicksFuncContext ctx) {
        return BuiltInFunction.TICKS;
    }

    @Override
    public Object visitSecondsFunc(HyperTalkParser.SecondsFuncContext ctx) {
        return BuiltInFunction.SECONDS;
    }

    @Override
    public Object visitTimeFunc(HyperTalkParser.TimeFuncContext ctx) {
        return ((LengthAdjective) visit(ctx.length())).getTimeFunction();
    }

    @Override
    public Object visitDateFunc(HyperTalkParser.DateFuncContext ctx) {
        return ((LengthAdjective) visit(ctx.length())).getDateFunction();
    }

    @Override
    public Object visitToolFunc(HyperTalkParser.ToolFuncContext ctx) {
        return BuiltInFunction.TOOL;
    }

    @Override
    public Object visitMouseClickFunc(HyperTalkParser.MouseClickFuncContext ctx) {
        return BuiltInFunction.MOUSECLICK;
    }

    @Override
    public Object visitLiteralTerm(HyperTalkParser.LiteralTermContext ctx) {
        return new LiteralExp(ctx, visit(ctx.literal()));
    }

    @Override
    public Object visitNegativeLiteralTerm(HyperTalkParser.NegativeLiteralTermContext ctx) {
        return new LiteralExp(ctx, new Value("-" + visit(ctx.literal())));
    }

    @Override
    public Object visitExpressionTerm(HyperTalkParser.ExpressionTermContext ctx) {
        return new GroupExp(ctx, (Expression) visit(ctx.expression()));
    }

    @Override
    public Object visitVisualEffectTerm(HyperTalkParser.VisualEffectTermContext ctx) {
        return visit(ctx.effectExpression());
    }

    @Override
    public Object visitProperty(HyperTalkParser.PropertyContext ctx) {
        return super.visitProperty(ctx);
    }

    @Override
    public Object visitContainerTerm(HyperTalkParser.ContainerTermContext ctx) {
        return super.visitContainerTerm(ctx);
    }

    @Override
    public Object visitChunkTerm(HyperTalkParser.ChunkTermContext ctx) {
        Expression arg = (Expression) visit(ctx.term());
        if (arg instanceof ContainerExp) {
            ((ContainerExp) arg).setChunk((Chunk) visit(ctx.chunk()));
            return arg;
        } else {
            return new ChunkExp(ctx, (Chunk) visit(ctx.chunk()), (Expression) visit(ctx.term()));
        }
    }

    @Override
    public Object visitTruncFunc(HyperTalkParser.TruncFuncContext ctx) {
        return BuiltInFunction.TRUNC;
    }

    @Override
    public Object visitEmptyExp(HyperTalkParser.EmptyExpContext ctx) {
        return new Value("");
    }

    @Override
    public Object visitPiExp(HyperTalkParser.PiExpContext ctx) {
        return new Value("3.14159265358979323846");
    }

    @Override
    public Object visitQuoteExp(HyperTalkParser.QuoteExpContext ctx) {
        return new Value("\"");
    }

    @Override
    public Object visitReturnExp(HyperTalkParser.ReturnExpContext ctx) {
        return new Value("\n");
    }

    @Override
    public Object visitSpaceExp(HyperTalkParser.SpaceExpContext ctx) {
        return new Value(" ");
    }

    @Override
    public Object visitTabExp(HyperTalkParser.TabExpContext ctx) {
        return new Value("\t");
    }

    @Override
    public Object visitFormFeedExp(HyperTalkParser.FormFeedExpContext ctx) {
        return new Value("\f");
    }

    @Override
    public Object visitLineFeedExp(HyperTalkParser.LineFeedExpContext ctx) {
        return new Value("\n");
    }

    @Override
    public Object visitCommaExp(HyperTalkParser.CommaExpContext ctx) {
        return new Value(",");
    }

    @Override
    public Object visitColonExp(HyperTalkParser.ColonExpContext ctx) {
        return new Value(":");
    }

    @Override
    public Object visitCardinalValue(HyperTalkParser.CardinalValueContext ctx) {
        return super.visitCardinalValue(ctx);
    }

    @Override
    public Object visitCardninalExp(HyperTalkParser.CardninalExpContext ctx) {
        return LiteralExp.ofCardinal(ctx, ctx.getText());
    }

    @Override
    public Object visitWaitForCountCmd(HyperTalkParser.WaitForCountCmdContext ctx) {
        return new WaitCmd(ctx, (Expression) visit(ctx.expression()), (TimeUnit) visit(ctx.timeUnit()));
    }

    @Override
    public Object visitTickTimeUnit(HyperTalkParser.TickTimeUnitContext ctx) {
        return TimeUnit.TICKS;
    }

    @Override
    public Object visitOrdinal(HyperTalkParser.OrdinalContext ctx) {
        return Ordinal.fromHyperTalkIdentifier(ctx.getText());
    }

    @Override
    public Object visitMouseState(HyperTalkParser.MouseStateContext ctx) {
        return super.visitMouseState(ctx);
    }

    @Override
    public Object visitModifierKey(HyperTalkParser.ModifierKeyContext ctx) {
        return super.visitModifierKey(ctx);
    }

    @Override
    public Object visitKnownType(HyperTalkParser.KnownTypeContext ctx) {
        return super.visitKnownType(ctx);
    }

    @Override
    public Object visitFindType(HyperTalkParser.FindTypeContext ctx) {
        return ctx.getText();
    }

    @Override
    public Object visitPropertySymbolValueExp(HyperTalkParser.PropertySymbolValueExpContext ctx) {
        return new VariableExp(ctx, ctx.getText());
    }

    @Override
    public Object visitBuiltInFuncCall(HyperTalkParser.BuiltInFuncCallContext ctx) {
        return visit(ctx.builtInFunc());
    }

    @Override
    public Object visitBuiltinFuncOneArgs(HyperTalkParser.BuiltinFuncOneArgsContext ctx) {
        ParseTree expTree = ctx.term() != null ? ctx.term() : ctx.listExpression();
        return ((BuiltInFunction) visit(ctx.oneArgFunc())).asSingleArgumentFunction(ctx, (Expression) visit(expTree));
    }

    @Override
    public Object visitBuiltinFuncNoArg(HyperTalkParser.BuiltinFuncNoArgContext ctx) {
        return ((BuiltInFunction) visit(ctx.zeroArgFunc())).asNoArgumentFunction(ctx);
    }

    @Override
    public Object visitBuiltinFuncArgList(HyperTalkParser.BuiltinFuncArgListContext ctx) {
        return ((BuiltInFunction) visit(ctx.multiArgFunc())).asListFunction(ctx, (Expression) visit(ctx.listExpression()));
    }

    @Override
    public Object visitBuiltinFuncNumber(HyperTalkParser.BuiltinFuncNumberContext ctx) {
        return new NumberFunc(ctx, (Expression) visit(ctx.countable()));
    }

    @Override
    public Object visitBuiltinFuncBtnFamily(HyperTalkParser.BuiltinFuncBtnFamilyContext ctx) {
        return new SelectedButtonFunc(ctx, (ButtonFamilySpecifier) visit(ctx.buttonFamily()));
    }

    @Override
    public Object visitOneArgArgFunc(HyperTalkParser.OneArgArgFuncContext ctx) {
        return visit(ctx.oneArgFunc());
    }

    @Override
    public Object visitAnnuityArgFunc(HyperTalkParser.AnnuityArgFuncContext ctx) {
        return BuiltInFunction.ANNUITY;
    }

    @Override
    public Object visitCompoundArgFunc(HyperTalkParser.CompoundArgFuncContext ctx) {
        return BuiltInFunction.COMPOUND;
    }

    @Override
    public Object visitOffsetArgFunc(HyperTalkParser.OffsetArgFuncContext ctx) {
        return BuiltInFunction.OFFSET;
    }

    @Override
    public Object visitAverageFunc(HyperTalkParser.AverageFuncContext ctx) {
        return BuiltInFunction.AVERAGE;
    }

    @Override
    public Object visitMinFunc(HyperTalkParser.MinFuncContext ctx) {
        return BuiltInFunction.MIN;
    }

    @Override
    public Object visitMaxFunc(HyperTalkParser.MaxFuncContext ctx) {
        return BuiltInFunction.MAX;
    }

    @Override
    public Object visitSumFunc(HyperTalkParser.SumFuncContext ctx) {
        return BuiltInFunction.SUM;
    }

    @Override
    public Object visitMenusFunc(HyperTalkParser.MenusFuncContext ctx) {
        return BuiltInFunction.MENUS;
    }

    @Override
    public Object visitConstantExp(HyperTalkParser.ConstantExpContext ctx) {
        return super.visitConstantExp(ctx);
    }

    @Override
    public Object visitLiteralExp(HyperTalkParser.LiteralExpContext ctx) {
        String literal = ctx.getText();

        // Drop quotes from quoted string literal when converting a value
        if (literal.startsWith("\"") && literal.endsWith("\"")) {
            return Value.ofQuotedLiteral(literal.substring(1, literal.length() - 1));
        }

        return new Value(ctx.getText());
    }

    @Override
    public Object visitDiskSpaceNoArgFunc(HyperTalkParser.DiskSpaceNoArgFuncContext ctx) {
        return BuiltInFunction.DISK_SPACE;
    }

    @Override
    public Object visitParamsFunc(HyperTalkParser.ParamsFuncContext ctx) {
        return BuiltInFunction.PARAMS;
    }

    @Override
    public Object visitParamCountFunc(HyperTalkParser.ParamCountFuncContext ctx) {
        return BuiltInFunction.PARAM_COUNT;
    }

    @Override
    public Object visitTargetFunc(HyperTalkParser.TargetFuncContext ctx) {
        return BuiltInFunction.TARGET;
    }

    @Override
    public Object visitSpeechFunc(HyperTalkParser.SpeechFuncContext ctx) {
        return BuiltInFunction.SPEECH;
    }

    @Override
    public Object visitVoicesFunc(HyperTalkParser.VoicesFuncContext ctx) {
        return BuiltInFunction.VOICES;
    }

    @Override
    public Object visitWindowsFunc(HyperTalkParser.WindowsFuncContext ctx) {
        return BuiltInFunction.WINDOWS;
    }

    @Override
    public Object visitCardsCount(HyperTalkParser.CardsCountContext ctx) {
        return new CountableExp(ctx, Countable.CARDS, null);
    }

    @Override
    public Object visitBackgroundCount(HyperTalkParser.BackgroundCountContext ctx) {
        return new CountableExp(ctx, Countable.BACKGROUNDS, null);
    }

    @Override
    public Object visitBackgroundsOfCount(HyperTalkParser.BackgroundsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.BACKGROUNDS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardButtonCount(HyperTalkParser.CardButtonCountContext ctx) {
        return new CountableExp(ctx, Countable.CARD_BUTTONS, null);
    }

    @Override
    public Object visitCardButtonsOfCount(HyperTalkParser.CardButtonsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.CARD_BUTTONS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardFieldCount(HyperTalkParser.CardFieldCountContext ctx) {
        return new CountableExp(ctx, Countable.CARD_FIELDS, null);
    }

    @Override
    public Object visitCardFieldsOfCount(HyperTalkParser.CardFieldsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.CARD_FIELDS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardPartCount(HyperTalkParser.CardPartCountContext ctx) {
        return new CountableExp(ctx, Countable.CARD_PARTS, null);
    }

    @Override
    public Object visitCardPartsOfCount(HyperTalkParser.CardPartsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.CARD_PARTS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndButtonCount(HyperTalkParser.BkgndButtonCountContext ctx) {
        return new CountableExp(ctx, Countable.BKGND_BUTTONS, null);
    }

    @Override
    public Object visitBkgndButtonsOfCount(HyperTalkParser.BkgndButtonsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.BKGND_BUTTONS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndFieldCount(HyperTalkParser.BkgndFieldCountContext ctx) {
        return new CountableExp(ctx, Countable.BKGND_FIELDS, null);
    }

    @Override
    public Object visitBkgndFieldsOfCount(HyperTalkParser.BkgndFieldsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.BKGND_FIELDS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndPartCount(HyperTalkParser.BkgndPartCountContext ctx) {
        return new CountableExp(ctx, Countable.BKGND_PARTS, null);
    }

    @Override
    public Object visitBkgndPartsOfCount(HyperTalkParser.BkgndPartsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.BKGND_PARTS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitMarkedCardsCount(HyperTalkParser.MarkedCardsCountContext ctx) {
        return new CountableExp(ctx, Countable.MARKED_CARDS, null);
    }

    @Override
    public Object visitMarkedCardsOfCount(HyperTalkParser.MarkedCardsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.MARKED_CARDS_OF, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardsOfCount(HyperTalkParser.CardsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.CARDS_OF, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCharsOfCount(HyperTalkParser.CharsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.CHARS_OF, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitItemsOfCount(HyperTalkParser.ItemsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.ITEMS_OF, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitWordsOfCount(HyperTalkParser.WordsOfCountContext ctx) {
        return new CountableExp(ctx, Countable.WORDS_OF, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitLinesOfCount(HyperTalkParser.LinesOfCountContext ctx) {
        return new CountableExp(ctx, Countable.LINES_OF, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitWindowsCount(HyperTalkParser.WindowsCountContext ctx) {
        return new CountableExp(ctx, Countable.WINDOWS, null);
    }

    @Override
    public Object visitMenusCount(HyperTalkParser.MenusCountContext ctx) {
        return new CountableExp(ctx, Countable.MENUS, null);
    }

    @Override
    public Object visitMenuItemsCount(HyperTalkParser.MenuItemsCountContext ctx) {
        return new CountableExp(ctx, Countable.MENU_ITEMS, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitCardFamily(HyperTalkParser.CardFamilyContext ctx) {
        return new ButtonFamilySpecifier(Owner.CARD, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitBkgndFamily(HyperTalkParser.BkgndFamilyContext ctx) {
        return new ButtonFamilySpecifier(Owner.BACKGROUND, (Expression) visit(ctx.term()));
    }

    @Override
    public Object visitStacksFunc(HyperTalkParser.StacksFuncContext ctx) {
        return BuiltInFunction.STACKS;
    }

    @Override
    public Object visitScreenRectFunc(HyperTalkParser.ScreenRectFuncContext ctx) {
        return BuiltInFunction.SCREENRECT;
    }

    @Override
    public Object visitSelectedChunkFunc(HyperTalkParser.SelectedChunkFuncContext ctx) {
        return BuiltInFunction.SELECTEDCHUNK;
    }

    @Override
    public Object visitSelectedFieldFunc(HyperTalkParser.SelectedFieldFuncContext ctx) {
        return BuiltInFunction.SELECTEDFIELD;
    }

    @Override
    public Object visitSelectedLineFunc(HyperTalkParser.SelectedLineFuncContext ctx) {
        return BuiltInFunction.SELECTEDLINE;
    }

    @Override
    public Object visitSelectedLocFunc(HyperTalkParser.SelectedLocFuncContext ctx) {
        return BuiltInFunction.SELECTEDLOC;
    }

    @Override
    public Object visitSelectedTextFunc(HyperTalkParser.SelectedTextFuncContext ctx) {
        return BuiltInFunction.SELECTEDTEXT;
    }

    @Override
    public Object visitSoundFunc(HyperTalkParser.SoundFuncContext ctx) {
        return BuiltInFunction.SOUND;
    }

    @Override
    public Object visitSystemVersionFunc(HyperTalkParser.SystemVersionFuncContext ctx) {
        return BuiltInFunction.SYSTEMVERSION;
    }

    @Override
    public Object visitOSNameFunc(HyperTalkParser.OSNameFuncContext ctx) {
        return BuiltInFunction.OSNAME;
    }

    @Override
    public Object visitOSVersionFunc(HyperTalkParser.OSVersionFuncContext ctx) {
        return BuiltInFunction.OSVERSION;
    }

    @Override
    public Object visitLongTimeFormat(HyperTalkParser.LongTimeFormatContext ctx) {
        return LengthAdjective.LONG;
    }

    @Override
    public Object visitAbbreviatedTimeFormat(HyperTalkParser.AbbreviatedTimeFormatContext ctx) {
        return LengthAdjective.ABBREVIATED;
    }

    @Override
    public Object visitShortTimeFormat(HyperTalkParser.ShortTimeFormatContext ctx) {
        return LengthAdjective.SHORT;
    }

    @Override
    public Object visitDefaultTimeFormat(HyperTalkParser.DefaultTimeFormatContext ctx) {
        return LengthAdjective.DEFAULT;
    }

    @Override
    public Object visitDiskSpaceFunc(HyperTalkParser.DiskSpaceFuncContext ctx) {
        return BuiltInFunction.DISK_SPACE;
    }

    @Override
    public Object visitParamFunc(HyperTalkParser.ParamFuncContext ctx) {
        return BuiltInFunction.PARAM;
    }

    @Override
    public Object visitRandomFunc(HyperTalkParser.RandomFuncContext ctx) {
        return BuiltInFunction.RANDOM;
    }

    @Override
    public Object visitRoundFunc(HyperTalkParser.RoundFuncContext ctx) {
        return BuiltInFunction.ROUND;
    }

    @Override
    public Object visitSqrtFunc(HyperTalkParser.SqrtFuncContext ctx) {
        return BuiltInFunction.SQRT;
    }

    @Override
    public Object visitSinFunc(HyperTalkParser.SinFuncContext ctx) {
        return BuiltInFunction.SIN;
    }

    @Override
    public Object visitCosFunc(HyperTalkParser.CosFuncContext ctx) {
        return BuiltInFunction.COS;
    }

    @Override
    public Object visitTanFunc(HyperTalkParser.TanFuncContext ctx) {
        return BuiltInFunction.TAN;
    }

    @Override
    public Object visitAtanFunc(HyperTalkParser.AtanFuncContext ctx) {
        return BuiltInFunction.ATAN;
    }

    @Override
    public Object visitExpFunc(HyperTalkParser.ExpFuncContext ctx) {
        return BuiltInFunction.EXP;
    }

    @Override
    public Object visitExp1Func(HyperTalkParser.Exp1FuncContext ctx) {
        return BuiltInFunction.EXP1;
    }

    @Override
    public Object visitExp2Func(HyperTalkParser.Exp2FuncContext ctx) {
        return BuiltInFunction.EXP2;
    }

    @Override
    public Object visitLnFunc(HyperTalkParser.LnFuncContext ctx) {
        return BuiltInFunction.LN;
    }

    @Override
    public Object visitLn1Func(HyperTalkParser.Ln1FuncContext ctx) {
        return BuiltInFunction.LN1;
    }

    @Override
    public Object visitLog2Func(HyperTalkParser.Log2FuncContext ctx) {
        return BuiltInFunction.LOG2;
    }

    @Override
    public Object visitNumToCharFunc(HyperTalkParser.NumToCharFuncContext ctx) {
        return BuiltInFunction.NUM_TO_CHAR;
    }

    @Override
    public Object visitValueFunc(HyperTalkParser.ValueFuncContext ctx) {
        return BuiltInFunction.VALUE;
    }

    @Override
    public Object visitLengthFunc(HyperTalkParser.LengthFuncContext ctx) {
        return BuiltInFunction.LENGTH;
    }

    @Override
    public Object visitCharToNumFunc(HyperTalkParser.CharToNumFuncContext ctx) {
        return BuiltInFunction.CHAR_TO_NUM;
    }

    @Override
    public Object visitAbsFunc(HyperTalkParser.AbsFuncContext ctx) {
        return BuiltInFunction.ABS;
    }

    @Override
    public Object visitTerminal(TerminalNode node) {
        return node.getText();
    }
}
